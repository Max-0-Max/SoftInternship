CREATE TABLE trx_log (
    id      NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    trx_id  VARCHAR2(20),
    status  VARCHAR2(20), -- 'Inserted' or 'Not Inserted'
    log_time DATE DEFAULT SYSDATE
);

-- Procedure to create multiple bank accounts from a JSON input
CREATE OR REPLACE PROCEDURE create_accounts_from_json(p_json IN CLOB) IS
    l_count NUMBER;  -- Variable to hold the number of account objects in the JSON array
BEGIN
    -- Parse the input JSON CLOB using APEX_JSON
    APEX_JSON.parse(p_json);

    l_count := APEX_JSON.get_count(p_path => '.');

    FOR i IN 1..l_count LOOP
        -- Extract values from each JSON object and insert into the bank_account table
        INSERT INTO bank_account(account_number, account_name, balance)
        VALUES (
            APEX_JSON.get_varchar2(p_path => '[' || i || '].account_number'), -- Get account_number as VARCHAR2
            APEX_JSON.get_varchar2(p_path => '[' || i || '].account_name'),   -- Get account_name as VARCHAR2
            APEX_JSON.get_number(p_path => '[' || i || '].balance')           -- Get balance as NUMBER
        );
    END LOOP;
    COMMIT;
END;
--All tables that is needed
CREATE TABLE bank_account(
    account_number VARCHAR2(20) PRIMARY KEY,
    account_name VARCHAR2(255),
    balance NUMBER(12, 2)
);



-- Function to return all bank account records in JSON format (as a CLOB)
CREATE OR REPLACE FUNCTION get_all_accounts_json RETURN CLOB IS
    l_json CLOB;  
BEGIN
    
    APEX_JSON.initialize_clob_output;
    APEX_JSON.open_object;

  
    APEX_JSON.open_array('accounts');

    -- Loop through each record in the bank_account table
    FOR rec IN (SELECT * FROM bank_account) LOOP
        -- Open a JSON object for each account
        APEX_JSON.open_object;

        -- Write account details into the JSON object
        APEX_JSON.write('account_number', rec.account_number); 
        APEX_JSON.write('account_name', rec.account_name);     
        APEX_JSON.write('balance', rec.balance);               

        -- Close the JSON object for the current account
        APEX_JSON.close_object;
    END LOOP;
 
    APEX_JSON.close_array;
    APEX_JSON.close_object;
    l_json := APEX_JSON.get_clob_output;
    APEX_JSON.free_output;

    -- Return the JSON CLOB
    RETURN l_json;
END;


-- Procedure to log transaction IDs from JSON input into the trx_log table
CREATE OR REPLACE PROCEDURE log_json_transaction(p_json IN CLOB) IS
    v_trx_inserted       VARCHAR2(4000);  
    v_trx_not_inserted   VARCHAR2(4000);  
BEGIN
    -- Parse the input JSON CLOB using APEX_JSON
    APEX_JSON.parse(p_json);
    v_trx_inserted := APEX_JSON.get_varchar2(p_path => 'TrxInserted');

    v_trx_not_inserted := APEX_JSON.get_varchar2(p_path => 'TrxNotInserted');

    -- Loop through each transaction ID in the "TrxInserted" string
    FOR trx IN (
        SELECT REGEXP_SUBSTR(v_trx_inserted, '[^,]+', 1, LEVEL) AS trx_id
        FROM dual
        CONNECT BY LEVEL <= REGEXP_COUNT(v_trx_inserted, ',') + 1
    ) LOOP
        -- Insert each transaction ID into trx_log with status 'Inserted'
        INSERT INTO trx_log(trx_id, status)
        VALUES (trx.trx_id, 'Inserted');
    END LOOP;

    -- Loop through each transaction ID in the "TrxNotInserted" string
    FOR trx IN (
        SELECT REGEXP_SUBSTR(v_trx_not_inserted, '[^,]+', 1, LEVEL) AS trx_id
        FROM dual
        CONNECT BY LEVEL <= REGEXP_COUNT(v_trx_not_inserted, ',') + 1
    ) LOOP
        -- Insert each transaction ID into trx_log with status 'Not Inserted'
        INSERT INTO trx_log(trx_id, status)
        VALUES (trx.trx_id, 'Not Inserted');
    END LOOP;

    COMMIT;
END;


