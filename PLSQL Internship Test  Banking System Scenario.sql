--All tables that is needed
CREATE TABLE bank_account(
    account_number VARCHAR2(20) PRIMARY KEY,
    account_name VARCHAR2(255),
    balance NUMBER(12, 2)
);

CREATE TABLE account_audit_log (
    id             NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    account_number VARCHAR2(20),
    old_balance    NUMBER(12, 2),
    new_balance    NUMBER(12, 2),
    modified_on    DATE DEFAULT SYSDATE
);

--Insert into table using bulk collect
DECLARE
    TYPE t_account_number IS TABLE OF bank_account.account_number%TYPE;
    TYPE t_account_name   IS TABLE OF bank_account.account_name%TYPE;
    TYPE t_balance        IS TABLE OF bank_account.balance%TYPE;

    v_account_numbers t_account_number := t_account_number(
        'ACC001', 'ACC002', 'ACC003', 'ACC004', 'ACC005',
        'ACC006', 'ACC007', 'ACC008', 'ACC009', 'ACC010'
    );

    v_account_names t_account_name := t_account_name(
        'Alice Martins', 'John Peters', 'Linda Gomez', 'Robert Blake', 'Nina Carter',
        'Brian Storm', 'Sophie Lane', 'Rajiv Menon', 'Chen Wang', 'Fatima Noor'
    );

    v_balances t_balance := t_balance(
        6000, 3000, 4500, 1200, 800,
        2500, 3200, 7000, 1900, 1000
    );
BEGIN
    FORALL i IN 1..v_account_numbers.COUNT  --insert all data to the table
        INSERT INTO bank_account(account_number, account_name, balance)
        VALUES (v_account_numbers(i), v_account_names(i), v_balances(i));

    COMMIT;
END;

--PROCEDURE TO FUND TRANSFER
CREATE OR REPLACE PROCEDURE transfer_funds(
    p_from_acc IN VARCHAR2,
    p_to_acc IN VARCHAR2,
    p_amount IN NUMBER
)IS
  v_from_balance NUMBER;
  v_to_balance NUMBER;
BEGIN
    --validate account
    SELECT balance INTO v_from_balance FROM bank_account WHERE account_number = p_from_acc FOR UPDATE;
    SELECT balance INTO v_to_balance FROM bank_account WHERE account_number = p_to_acc FOR UPDATE;

    --check sufficient balance
    IF v_from_balance < p_amount THEN
        RAISE_APPLICATION_ERROR(-20001, 'Insufficient balance');
    END IF;

    --perform transfer
    UPDATE  bank_account SET balance = balance - p_amount WHERE account_number = p_from_acc;
    UPDATE  bank_account SET balance = balance + p_amount WHERE account_number = p_to_acc;

    COMMIT;

EXCEPTION
    WHEN OTHERS THEN
       ROLLBACK;
       RAISE;
END;


/
--Function to get account summary
CREATE OR REPLACE FUNCTION get_account_summary(
    p_acct_no IN VARCHAR2
) RETURN VARCHAR2 IS
    v_name    bank_account.account_name%TYPE;
    v_balance bank_account.balance%TYPE;
BEGIN
    --get account details
    SELECT account_name, balance 
    INTO v_name, v_balance 
    FROM bank_account 
    WHERE account_number = p_acct_no;

    RETURN 'Account: ' || v_name || ', Balance: ' || TO_CHAR(v_balance, 'FM9999990.00');
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN 'Account not found';
    WHEN OTHERS THEN
        RETURN 'Error: ' || SQLERRM;
END;
/

--cursor to calculate Intrest
DECLARE
    CURSOR c_accounts IS 
       SELECT  account_number, balance
       FROM bank_account
       FOR UPDATE;
BEGIN
    FOR acc IN c_accounts LOOP
    --apply 5% INTREST 
       UPDATE bank_account
       SET balance = acc.balance * 1.05
       WHERE CURRENT OF c_accounts;
    END LOOP;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;


--Trigger to audit transactions
CREATE OR REPLACE TRIGGER trg_audit_transaction
AFTER UPDATE OF balance ON bank_account
FOR EACH ROW
BEGIN
    INSERT INTO account_audit_log (
        account_number,
        old_balance,
        new_balance,
        modified_on
    )
    VALUES (
        :OLD.account_number,
        :OLD.balance,
        :NEW.balance,
        SYSDATE
    );
EXCEPTION
    WHEN OTHERS THEN
        NULL;  
END;
/

--EXCEPTION HANDLING
CREATE OR REPLACE PROCEDURE withdraw(
    p_account_no VARCHAR2,
    p_amount NUMBER
)IS 
  v_balance bank_account.BALANCE%TYPE;
  e_min_balance EXCEPTION;

BEGIN
    SELECT balance INTO v_balance
    FROM bank_account
    WHERE account_number = p_account_no
    FOR UPDATE;

    --Minimum balance rule
    IF(v_balance - p_amount) < 1000 THEN
       RAISE e_min_balance;
    END IF;

    --deduct account
    UPDATE bank_account 
    SET balance = balance - p_amount
    WHERE account_number = p_account_no;

    COMMIT;

EXCEPTION
    WHEN e_min_balance THEN
        RAISE_APPLICATION_ERROR(-20002, 'Minimum balance of 1000 must be maintained');
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;
/

--call procedure to transfer funds from one account to another
BEGIN
    transfer_funds('ACC001', 'ACC002', 500);
END;

--call function to get account summary
SELECT get_account_summary('ACC002') FROM dual;


--call procedure for exception handling
BEGIN
  WITHDRAW('ACC001', 50000);
END;


--6
/*
%TYPE INHERITS THE DATA TYPE OF A  COLUMN WHILE %ROWTYPE INHERITS THE STRUCTURE OF ROW OF A TABLE

--AUTONOMOUS_TRANSACTION:Allows a procedure or trigger to commit/rollback independently of the main transaction.

SAVEPOINT marks a point within a transaction.

ROLLBACK TO SAVEPOINT reverts to that point without rolling back the entire transaction.

IN: Read-only, passed to procedure.

OUT: Write-only, used to return data.

IN OUT: Read/write, can modify and return data.
*/
